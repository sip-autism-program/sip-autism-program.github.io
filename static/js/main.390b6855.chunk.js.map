{"version":3,"sources":["component/card/index.style.ts","component/card/index.tsx","page/main/hooks/flip-card.ts","utils/randomizer.ts","page/main/index.tsx","page/main/hooks/timer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["url","img","card","height","width","border","borderColor","colors","amber","borderRadius","boxShadow","grey","transition","backgroundImage","p","frontSideImg","backgroundSize","cardWidth","cardRevealed","transform","useStyles","makeStyles","FlipCard","styles","role","className","revealed","useFlipCardGame","hookParams","array","initCards","concat","map","index","id","content","locked","useState","R","x","order","Math","random","cards","setCards","useEffect","revealedCards","filter","length","cardsContent","eq","setTimeout","c","flipCardById","changedCards","hideAll","MainPage","hideAllCallback","useCallback","leftTime","totalTime","setLeftTime","interval","setInterval","console","log","clearInterval","useCountdown","Container","onCardClick","Box","display","flexDirection","flexWrap","m","onClick","key","renderCards","args","Typography","variant","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.390b6855.chunk.js","sourcesContent":["import { colors, makeStyles } from '@material-ui/core'\n\nconst patternImg = 'http://clipart-library.com/images/5cRX6qkEi.png'\nconst url = (img: string) => `url(${img})`\n\nconst cardHeight = '200px'\nconst cardWidth = '120px'\nconst bgImgSize = cardWidth + ' ' + cardHeight\n\ntype CardStyleProps = {\n  frontSideImg: string\n}\n// TODO: is there any way to get the parameter type of makeStyles?\nconst card = {\n  height: cardHeight,\n  width: cardWidth,\n  border: '1px solid',\n  borderColor: colors.amber[200],\n  borderRadius: '12%',\n  boxShadow: '0px 5px 5px ' + colors.grey[500],\n  transition: 'all 0.2s ease-in',\n  backgroundImage: (p: CardStyleProps) => url(p.frontSideImg),\n  backgroundSize: bgImgSize,\n}\n\nconst cardRevealed = {\n  ...card,\n  transform: 'rotateY(180deg)',\n  backgroundSize: bgImgSize,\n  backgroundImage: url(patternImg)\n}\n\nexport const useStyles = makeStyles({\n  card, cardRevealed\n})\n","import React from 'react'\nimport { useStyles } from './index.style'\n\nexport type FlipCardProps = {\n  revealed: boolean\n  frontSideImg: string\n}\n\nconst FlipCard = (p: FlipCardProps) => {\n  const styles = useStyles({ frontSideImg: p.frontSideImg })\n  return (\n    <div role='none' className={p.revealed ? styles.card : styles.cardRevealed} />\n  )\n}\nexport default FlipCard","import * as R from 'ramda'\nimport { useEffect, useState } from 'react'\nimport { shuffleArray } from 'utils/randomizer'\n\nexport type Card = {\n  id: number\n  content: string\n  revealed: boolean\n  locked: boolean\n}\n\n\nconst delayTimeForPlayingFlippingAnim = 400\n\nexport const useFlipCardGame = (hookParams: Pick<Card, 'content'>[]) => {\n  const initCards = hookParams.concat(hookParams).map((p, index) => ({\n    id: index,\n    content: p.content,\n    revealed: true,\n    locked: false\n  }))\n\n  const [cards, setCards] = useState<Card[]>(shuffleArray(initCards))\n\n/** when there are 2 cards being revealed, the content of them will be checked */\n/** 1. same content -> keep them revealed & mark them locked (locked means not operable any more) */\n/** 2. different content -> hide them */\n  useEffect(() => {\n    const revealedCards = cards.filter(R.compose(R.not, R.prop('locked'))).filter(R.prop('revealed'))\n    if (revealedCards.length !== 2) return\n    const cardsContent = revealedCards.map(R.prop('content'))\n    const eq = R.equals(cardsContent[0])\n    const areSameCards = R.all(eq)(cardsContent)\n    if (areSameCards)\n      setTimeout(() =>\n        setCards(cards.map(c => c.revealed ? { ...c, locked: true } : c))\n        , delayTimeForPlayingFlippingAnim)\n    else\n      setTimeout(() =>\n        setCards(cards.map(c => c.locked ? c : ({ ...c, revealed: false })))\n        , delayTimeForPlayingFlippingAnim)\n  }, [cards, setCards])\n\n\n  const hideAll = () => {\n    setCards(cards.map(c => ({ ...c, revealed: false })))\n  }\n\n  const flipCardById = (id: Card['id']) => {\n    const flipCardIfIdMatch = (c: Card) => c.id === id ? { ...c, revealed: true } : c\n    const changedCards = cards.map(flipCardIfIdMatch)\n    setCards(changedCards)\n  }\n\n  return { cards, flipCardById, hideAll }\n}","import * as R from 'ramda'\n\nexport const shuffleArray = <T = unknown>(array: T[]) => {\n  const sorted = R.sortBy(R.prop('order'))(array.map(x => ({ ...x, order: Math.random() })))\n  return sorted.map(R.omit(['order']))\n}","import { Box, Container, Typography } from '@material-ui/core'\nimport FlipCard from 'component/card'\nimport React, { useCallback, useEffect } from 'react'\nimport { Card, useFlipCardGame } from './hooks/flip-card'\nimport { useCountdown } from './hooks/timer'\n\nconst pokerJackImg = 'https://cdn.pixabay.com/photo/2012/04/11/14/05/hearts-28358_1280.png'\nconst pokerAceImg = 'https://cdn.pixabay.com/photo/2014/03/25/17/01/spades-297839_1280.png'\nconst pokerKingImg = 'https://cdn.pixabay.com/photo/2012/04/11/14/11/king-28374_1280.png'\nconst pokerQueenImg = 'https://cdn.pixabay.com/photo/2012/04/11/13/48/hearts-28307_1280.png'\n\nconst renderCards = (cards: Card[], onCardClick: (p: Card) => any) => {\n  return <Box display='flex' flexDirection='row' flexWrap='wrap'>\n    {cards.map((c) =>\n      <Box m={2} onClick={() => onCardClick(c)} key={c.id}>\n        <FlipCard revealed={c.revealed} frontSideImg={c.content} />\n      </Box>\n    )}\n  </Box>\n}\n\nexport type MainPageProps = {\n\n}\n\nconst MainPage = (p: MainPageProps) => {\n  const { cards, flipCardById, hideAll } = useFlipCardGame([\n    { content: pokerJackImg },\n    { content: pokerQueenImg },\n    { content: pokerKingImg },\n    { content: pokerAceImg },\n  ])\n\n  const hideAllCallback = useCallback(hideAll, [])\n\n  const onCardClick: Parameters<typeof renderCards>[1] = args => {\n    flipCardById(args.id)\n  }\n\n  const { leftTime } = useCountdown(3)\n\n  useEffect(() => {\n    if (leftTime === 0) hideAllCallback()\n  }, [leftTime, hideAllCallback])\n\n\n  return (\n    <div>\n      <Container >\n        {renderCards(cards, onCardClick)}\n      </Container>\n      <Container>\n        <Typography variant='h1'>\n          {leftTime || ''}\n        </Typography>\n      </Container>\n    </div>\n  )\n}\nexport default MainPage","import { useEffect, useState } from 'react'\n\n/**\n * \n * @param totalTime second as unit\n */\nexport const useCountdown = (totalTime: number) => {\n  const [leftTime, setLeftTime] = useState(totalTime)\n\n  useEffect(() => {\n    const interval = setInterval(() => {\n      if (leftTime > 0) {\n        setLeftTime((leftTime - 1))\n        console.log('time minus')\n      }\n    }, 1000)\n    return () => clearInterval(interval)\n  }, [leftTime])\n\n  return { leftTime }\n}","import MainPage from 'page/main'\nimport React from 'react'\nimport './App.css'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MainPage />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}